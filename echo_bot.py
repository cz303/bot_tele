# This is a simple echo bot using the decorator mechanism.
# It echoes any incoming text messages.

import telebot
from tokens \
    import *
import random
import logging
from datetime import datetime
import sqlite3
from telebot import types
from telegramcalendar import create_calendar
import psutil
import time
import re

logging.basicConfig(filename="logs/tele_bot.log", level=logging.INFO)

current_shown_dates={}

setmessage = []
viewstatic = []
inlk = []
inorderheader = []
inorderplace = []
inordercomment = []
inordertime = []

userchatid = []
adminchatid = []
graphstart = datetime.now()

rules = "*–ñ–∏—Ä–Ω—ã–π*\n_–ö—É—Ä—Å–∏–≤_\n[–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å—Å—ã–ª–∫–∏](–ê–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏, –ø—Ä–∏–º–µ—Ä https://ya.ru)"

ordermarkup = types.InlineKeyboardMarkup()
row=[]
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å —à–æ—É", callback_data="order_header"))
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –¥–∞—Ç—É", callback_data="order_date"))
ordermarkup.row(*row)
row=[]
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è", callback_data="order_time"))
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ", callback_data="order_place"))
ordermarkup.row(*row)
row=[]
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="order_comment"))
row.append(types.InlineKeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="order_back"))
ordermarkup.row(*row)

ordersendmarkup = types.InlineKeyboardMarkup()
row=[]
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å —à–æ—É", callback_data="order_header"))
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –¥–∞—Ç—É", callback_data="order_date"))
ordersendmarkup.row(*row)
row=[]
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è", callback_data="order_time"))
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ", callback_data="order_place"))
ordersendmarkup.row(*row)
row=[]
row.append(types.InlineKeyboardButton(text="‚ûï –ó–∞–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="order_comment"))
row.append(types.InlineKeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="order_back"))
ordersendmarkup.row(*row)
ordersendmarkup.add(types.InlineKeyboardButton(text="‚òë –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="order_send"))

orderupdatemarkup = types.InlineKeyboardMarkup()
orderupdatemarkup.add(types.InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="order_refresh"))

stopmarkup = types.InlineKeyboardMarkup()
stopmarkup.add(types.InlineKeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="back"))

sendmarkup = types.InlineKeyboardMarkup()
sendmarkup.add(types.InlineKeyboardButton(text="‚òë –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send"))
sendmarkup.add(types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back"))

elementmarkup_unreg = types.ReplyKeyboardMarkup(row_width=1)
elementmarkup_unreg.add(types.KeyboardButton('–ü—Ä–æ –Ω–∞—Å'))
elementmarkup_unreg.add(types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞'))

stopkeyboardmarkup = types.ReplyKeyboardMarkup(row_width=1)
stopkeyboardmarkup.add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å'))

elementmarkup_soc = types.InlineKeyboardMarkup()
elementmarkup_soc.add(types.InlineKeyboardButton(text="Instagram", url="https://www.instagram.com/element_show"))
elementmarkup_soc.add(types.InlineKeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url="https://vk.com/club92907131"))
elementmarkup_soc.add(types.InlineKeyboardButton(text="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", url="http://deliriumshow.com"))

adminmarkup = types.ReplyKeyboardMarkup(row_width=1)
itembtn1 = types.KeyboardButton('–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')
itembtn2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
adminmarkup.add(itembtn1, itembtn2)

yn_markup = types.ReplyKeyboardMarkup(row_width=1)
yn_markup.add('–î–∞', '–ù–µ—Ç', '–•–≤–∞—Ç–∏—Ç')

yn_only_markup = types.ReplyKeyboardMarkup(row_width=1)
yn_only_markup.add('–î–∞', '–ù–µ—Ç')

elementmarkup_reg = types.ReplyKeyboardMarkup(row_width=1)
elementmarkup_reg.add('–ü—Ä–æ –Ω–∞—Å', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'Proxy –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞')

elementmarkup_unreg = types.ReplyKeyboardMarkup(row_width=1)
elementmarkup_unreg.add('–ü—Ä–æ –Ω–∞—Å', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞')

elementmarkup_lk = types.ReplyKeyboardMarkup(row_width=1)
elementmarkup_lk.add('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å–ª–∏—Å—Ç', '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑', '–ù–∞–∑–∞–¥')

likemarkup = types.InlineKeyboardMarkup()
row=[]
row.append(types.InlineKeyboardButton("üëç",callback_data="like"))
row.append(types.InlineKeyboardButton("üëé",callback_data="dislike"))
likemarkup.row(*row)

conn = sqlite3.connect("mydatabase.db")
cursor = conn.cursor()
for row in cursor.execute("select chat_id from chats where status = 2;"):
    adminchatid.append(float(row[0]))
conn.close()

conn = sqlite3.connect("mydatabase.db")
cursor = conn.cursor()
for row in cursor.execute("select chat_id from chats where status = 1;"):
    userchatid.append(float(row[0]))
conn.close()

def RepresentsInt(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def xstr(s):
    if s is None or s == 'None':
        return ''
    else:
        return str(s)

def is_str(s):
    if s is None or s == 'None':
        return False
    else:
        return True

def is_time(s):
    result = re.findall(r'[0,1,2]\d{1}[:][0,1,2,3,4,5]\d{1}', s)
    if len(result) > 0:
        return True
    else:
        return False

def order(header = None,
          date = None,
          time = None,
          place = None,
          comment = None,
          customer = None):
    order_header = "*–®–æ—É:* " + xstr(header) + "\n"
    order_date = "*–î–∞—Ç–∞:* " + xstr(date) + "\n"
    order_time = "*–í—Ä–µ–º—è:* " + xstr(time) + "\n"
    order_place = "*–ú–µ—Å—Ç–æ:* " + xstr(place) + "\n"
    order_comment = "*–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* " + xstr(comment) + "\n"
    order_customer = "*–ó–∞–∫–∞–∑—á–∏–∫:* " + xstr(customer) + "\n"
    order = order_header + order_date + order_time + order_place + order_comment + order_customer
    return order

def check_order(header, date, time, place, comment):
    if is_str(header) and is_str(date) and is_str(time) and is_str(place) and is_str(comment):
        return True
    else:
        return False

def hello(name):
    phrase = ['–ü—Ä–∏–≤–µ—Ç, ', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ', '–ê–ª–ª–æ—Ö–∞, ']
    i = random.randint(0, 3)
    result = phrase[i] + name + "!"
    return result

bot = telebot.TeleBot(telegrambot)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    conn = sqlite3.connect("mydatabase.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO chats(chat_id) VALUES (" + str(message.chat.id) + ");")
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –°–ø—Ä–∞–≤—à–∏–≤–∞–π, —è —Ä–∞—Å—Å–∫–∞–∂—É", reply_markup=elementmarkup_unreg)


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    content_type = str(message.content_type)
    chat_type = str(message.chat.type)
    chat_id = message.chat.id

    conn = sqlite3.connect("mydatabase.db")
    cursor = conn.cursor()
    cursor.execute("update stats set number = number+1 where stat = 'messages';")
    conn.commit()

    if chat_id in adminchatid:
        logging.info("Incoming message on admin chat" + str(message) + " time:" + str(datetime.now()))
    else:
        logging.info("Incoming message on public chat" + str(message) + " time:" + str(datetime.now()))
    if content_type == 'text':
        text = str(message.text)
        bot.send_chat_action(chat_id, 'typing')
        if chat_id in adminchatid:
            if chat_id not in setmessage:
                if text == '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
                    setmessage.append(chat_id)
                    bot.send_message(chat_id, "–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?\n\n" + rules, reply_markup=stopmarkup, disable_web_page_preview=True)
                elif text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                    memory = psutil.virtual_memory()
                    disk = psutil.disk_usage('/')
                    boottime = datetime.fromtimestamp(psutil.boot_time())
                    now = datetime.now()
                    label_serv = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:*"
                    timedif = "–û–Ω–ª–∞–π–Ω: *%.1f* —á–∞—Å–æ–≤" % (((now - boottime).total_seconds()) / 3600)
                    memtotal = "–ü–∞–º—è—Ç–∏: *%.2f* GB " % (memory.total / 1000000000)
                    memavail = "–î–æ—Å—Ç—É–ø–Ω–æ: *%.2f* GB" % (memory.available / 1000000000)
                    memuseperc = "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: *" + str(memory.percent) + "* %"
                    diskused = "HDD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: *" + str(disk.percent) + "* %"

                    label_follow = '*–ù–∞ –º–µ–Ω—è –ø–æ–¥–ø–∏—Å–∞–Ω–æ:*\n'
                    for row in cursor.execute(
                            "select (case when status = 0 then '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' "
                            "when status = 1 then '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' "
                            "else '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' end) as label,count(chat_id) from chats group by label;"):
                        label_follow = label_follow + str(row[0]) + ": *" + str(row[1]) + "*\n"

                    label_stats = '*–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n'
                    for row in cursor.execute(
                            "select name, number from stats;"):
                        label_stats = label_stats + str(row[0]) + ": *" + str(row[1]) + "*\n"

                    reply = label_serv + "\n" + \
                            timedif + "\n" + \
                            memtotal + "\n" + \
                            memavail + "\n" + \
                            memuseperc + "\n" + \
                            diskused + "\n\n" + \
                            label_follow + "\n" + \
                            label_stats

                    bot.send_message(chat_id, reply, parse_mode='MARKDOWN', disable_web_page_preview=True)
            if chat_id in setmessage:
                if text != '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
                    label = "–°–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n"
                    bot.send_message(chat_id, label + text,
                                          reply_markup=sendmarkup, disable_web_page_preview=True)
        else:
            if chat_id in userchatid:
                if chat_id in inorderheader:
                    cursor.execute(
                        "update orders set header = '" + text + "' where chat_id = "
                        + str(chat_id) + " and status = 0;")
                    conn.commit()
                    inorderheader.remove(chat_id)
                    bot.send_message(chat_id, "–®–æ—É –∑–∞–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ", parse_mode='MARKDOWN',
                                          reply_markup=orderupdatemarkup)

                elif chat_id in inorderplace:
                    cursor.execute(
                        "update orders set place = '" + text + "' where chat_id = "
                        + str(chat_id) + " and status = 0;")
                    conn.commit()
                    inorderplace.remove(chat_id)
                    bot.send_message(chat_id, "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —à–æ—É –∑–∞–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ", parse_mode='MARKDOWN',
                                          reply_markup=orderupdatemarkup)
                elif chat_id in inordercomment:
                    cursor.execute(
                        "update orders set comment = '" + text + "' where chat_id = "
                        + str(chat_id) + " and status = 0;")
                    conn.commit()
                    inordercomment.remove(chat_id)
                    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω", parse_mode='MARKDOWN',
                                          reply_markup=orderupdatemarkup)
                elif chat_id in inordertime:
                    if is_time(text):
                        inordertime.remove(chat_id)
                        cursor.execute(
                            "update orders set time = '" + text + "' where chat_id = "
                            + str(chat_id) + " and status = 0;")
                        conn.commit()
                        bot.send_message(chat_id, "–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω–æ", parse_mode='MARKDOWN',
                                         reply_markup=orderupdatemarkup)
                    else:
                        bot.send_message(chat_id,
                                         "–í—Ä–µ–º—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
                elif chat_id in inlk:
                    if text == "–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å–ª–∏—Å—Ç":
                        try:
                            f = open('/root/bot_tele/etc/element_show_prices.pdf', 'rb', )
                            bot.send_document(chat_id, f)
                        except:
                            bot.send_message(chat_id, '–ü—Ä–∏–Ω–æ—à—É —Å–≤–æ–∏ –∏–∑–º–∏–Ω–µ–Ω–∏—è, —É –º–µ–Ω—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å–∞! \n'
                                                      '–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —è —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
                            for admin_chat_id in adminchatid:
                                try:
                                    bot.send_chat_action(admin_chat_id, 'typing')
                                    bot.send_message(admin_chat_id, "–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å, –∞ —Ñ–∞–π–ª–∞ —É –±–æ—Ç–∞ –Ω–µ—Ç")
                                    bot.forward_message(admin_chat_id, chat_id, message.message_id)
                                except:
                                    print("–•–º-–º")
                    elif text == '–ù–∞–∑–∞–¥':
                        inlk.remove(chat_id)
                        bot.send_message(chat_id, "–í–µ—Ä–Ω—É–ª–∏—Å—å", reply_markup=elementmarkup_reg)
                    elif text == '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑':
                        cursor = cursor.execute("select header, date, time, place, comment, rowid from orders "
                                                "where chat_id = " + str(chat_id) + " and status = 0"
                                                                                    " order by rowid desc limit 1;")
                        if len(cursor.fetchall()) == 0:
                            cursor.execute("INSERT INTO orders(chat_id, header) VALUES (" + str(chat_id)
                                       + ", '_–£–∫–∞–∂–∏—Ç–µ —à–æ—É_');")
                            conn.commit()
                            bot.send_message(message.chat.id, order(header="_–£–∫–∞–∂–∏—Ç–µ —à–æ—É_"), parse_mode='MARKDOWN',
                                             reply_markup=ordermarkup)
                        else:
                            for row in cursor.execute(
                                    "select header, date, time, place, comment, rowid from orders where chat_id = "
                                    + str(chat_id) + " and status = 0 order by rowid desc limit 1;"):
                                text = order(header=row[0], date=row[1], time=row[2], place=row[3], comment=row[4])
                                if check_order(row[0], row[1], row[2], row[3], row[4]):
                                    bot.send_message(chat_id, text,
                                                  parse_mode='MARKDOWN',
                                                  reply_markup=ordersendmarkup)
                                else:
                                    bot.send_message(chat_id, text,
                                                     parse_mode='MARKDOWN',
                                                     reply_markup=ordermarkup)

                else:
                    if text == "–ü—Ä–æ –Ω–∞—Å":
                        bot.send_message(chat_id,
                                         "–ê—Ä—Ç-–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ELEMENT\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–æ—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞"
                                         " –ª—é–±–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, —è—Ä–∫–∏–µ, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è!\n\nüî•    –û–≥–Ω–µ–Ω–Ω–æ–µ "
                                         "—à–æ—É\nüí°    –°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–µ —à–æ—É\n ‚ö°Ô∏è   –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ —à–æ—É\n üí®   –®–æ—É –í–µ—Ç"
                                         "—Ä–∞\n üî¶   –ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ —à–æ—É\nüö®    –ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —à–æ—É\nüéÄ    –®–æ—É –≥–∏–º–Ω–∞—Å—Ç–æ"
                                         "–∫\nüîÆ    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\nüé™    –•–æ–¥—É–ª–∏—Å—Ç—ã, –º–∏–º—ã, –∂–æ–Ω–≥–ª–µ—Ä—ã, –ª–µ–¥–∏"
                                         "-—Ñ—É—Ä—à–µ—Ç, –∂–∏–≤—ã–µ —Å—Ç–∞—Ç—É–∏",
                                         reply_markup=elementmarkup_soc)
                    elif text == "Proxy –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞":
                        bot.send_message(chat_id,
                                         "[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Proxy](https://t.me/socks?server=195.201.136.255&"
                                         "port=1080&user=element_89179024466&pass=*****)",
                                         parse_mode='MARKDOWN', reply_markup=elementmarkup_reg)
                    elif text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞':
                        userchatid.remove(chat_id)
                        if str(message.chat.first_name):
                            name = str(message.chat.first_name)
                        else:
                            name = str(message.chat.id)
                        cursor.execute("update chats set status = 0, name = '" + name + "' "
                                                                                        "where "
                                                                                        "chat_id = "
                                                                                        "" + str(chat_id) + ";")
                        conn.commit()
                        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!",
                                         reply_markup=elementmarkup_unreg)
                    elif text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                        inlk.append(chat_id)
                        bot.send_message(chat_id, "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=elementmarkup_lk)
            else:
                if text == '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞':
                    if chat_type == 'private':
                        userchatid.append(chat_id)
                        if str(message.chat.first_name):
                            name = str(message.chat.first_name)
                        else:
                            name = str(message.chat.id)
                        cursor.execute("update chats set status = 1, "
                                       "name = '" + name + "' where chat_id = " + str(chat_id) + ";")
                        conn.commit()
                        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞",
                                         reply_markup=elementmarkup_reg)
                    else:
                        bot.send_message(chat_id, "–¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤",
                                         reply_markup=elementmarkup_unreg)
                elif text == "–ü—Ä–æ –Ω–∞—Å":
                    bot.send_message(chat_id,
                                     "–ê—Ä—Ç-–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ELEMENT\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ "
                                     "—à–æ—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –ª—é–±–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ. "
                                     "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, —è—Ä–∫–∏–µ, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è!\n\nüî•    "
                                     "–û–≥–Ω–µ–Ω–Ω–æ–µ —à–æ—É\nüí°    –°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–µ —à–æ—É\n ‚ö°Ô∏è   –≠–ª–µ–∫—Ç—Ä–∏—á"
                                     "–µ—Å–∫–æ–µ —à–æ—É\n üí®   –®–æ—É –í–µ—Ç—Ä–∞\n üî¶   –ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ —à–æ—É\nüö®    –ü–∏–∫—Å–µ–ª"
                                     "—å–Ω–æ–µ —à–æ—É\nüéÄ    –®–æ—É –≥–∏–º–Ω–∞—Å—Ç–æ–∫\nüîÆ    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\nüé™    –•–æ–¥—É–ª–∏"
                                     "—Å—Ç—ã, –º–∏–º—ã, –∂–æ–Ω–≥–ª–µ—Ä—ã, –ª–µ–¥–∏-—Ñ—É—Ä—à–µ—Ç, –∂–∏–≤—ã–µ —Å—Ç–∞—Ç—É–∏",
                                     reply_markup=elementmarkup_soc)
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'like')
def like(call):
    conn = sqlite3.connect("mydatabase.db")
    cursor = conn.cursor()
    cursor.execute("update stats set number = number+1 where stat = 'likes';")
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")
    bot.edit_message_reply_markup(call.from_user.id,
                          call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'dislike')
def dislike(call):
    conn = sqlite3.connect("mydatabase.db")
    cursor = conn.cursor()
    cursor.execute("update stats set number = number+1 where stat = 'dislikes';")
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤")
    bot.edit_message_reply_markup(call.from_user.id,
                          call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data[0:13] == 'calendar-day-')
def get_day(call):
    chat_id = call.message.chat.id
    saved_date = current_shown_dates.get(chat_id)
    if(saved_date is not None):
        day=call.data[13:]
        date = datetime(int(saved_date[0]), int(saved_date[1]), int(day))
        conn = sqlite3.connect("mydatabase.db")
        cursor = conn.cursor()
        cursor.execute("update orders set date = '" + str(date.strftime("%d.%m.%Y")) + "' where chat_id = "
                       + str(call.message.chat.id) + " and status = 0;")
        conn.commit()
        for row in cursor.execute("select header, date, time, place, comment, rowid from orders where chat_id = "
                                  + str(call.message.chat.id) + " and status = 0 order by rowid desc limit 1;"):
            text = order(header=row[0], date=row[1], time=row[2], place=row[3], comment=row[4])
            if check_order(row[0], row[1], row[2], row[3], row[4]):
                bot.edit_message_text(text, call.from_user.id, call.message.message_id, parse_mode='MARKDOWN',
                                      reply_markup=ordersendmarkup)
                bot.answer_callback_query(call.id, text="–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞")
            else:
                bot.edit_message_text(text, call.from_user.id, call.message.message_id, parse_mode='MARKDOWN',
                                      reply_markup=ordermarkup)
                bot.answer_callback_query(call.id, text="–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞")
        conn.close()
    else:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'next-month')
def next_month(call):
    chat_id = call.message.chat.id
    saved_date = current_shown_dates.get(chat_id)
    if(saved_date is not None):
        year,month = saved_date
        month+=1
        if month>12:
            month=1
            year+=1
        date = (year,month)
        current_shown_dates[chat_id] = date
        markup= create_calendar(year,month)
        bot.edit_message_text(call.message.text, call.from_user.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id, text="")
    else:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'previous-month')
def previous_month(call):
    chat_id = call.message.chat.id
    saved_date = current_shown_dates.get(chat_id)
    if(saved_date is not None):
        year,month = saved_date
        month-=1
        if month<1:
            month=12
            year-=1
        date = (year,month)
        current_shown_dates[chat_id] = date
        markup= create_calendar(year,month)
        bot.edit_message_text(call.message.text, call.from_user.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id, text="")
    else:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'ignore')
def ignore(call):
    bot.answer_callback_query(call.id, text="")

@bot.callback_query_handler(func=lambda call: call.data == 'less_day')
def less_day(call):
    bot.answer_callback_query(call.id, text="–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è")

@bot.callback_query_handler(func=lambda call: call.data == 'back')
def less_day(call):
    bot.answer_callback_query(call.id, text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    try:
        if call.from_user.username:
            text = "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: [" + call.from_user.first_name \
                   + "](https://t.me/" + call.from_user.username + ")"
        else:
            text = "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        bot.edit_message_text(text, call.message.chat.id,
                          call.message.message_id, parse_mode='MARKDOWN', disable_web_page_preview=True)
        setmessage.remove(call.message.chat.id)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'send')
def less_day(call):
    bot.answer_callback_query(call.id, text="–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
    try:
        k = 0
        text = call.message.text.lstrip('–°–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n')
        conn = sqlite3.connect("mydatabase.db")
        cursor = conn.cursor()
        for row in cursor.execute("select chat_id, name from chats where status = 1"):
            bot.send_message(row[0], hello(row[1]) + "\n\n" + text,
                         parse_mode='MARKDOWN', disable_web_page_preview=True, reply_markup=likemarkup)
            k = k + 1
        cursor.execute("update stats set number = number+" + str(k) + " where stat = 'mass_messages';")
        conn.commit()
        conn.close()
        if call.from_user.username:
            text = "*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *\n\n" + text + "\n\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + str(k) + " —Å–æ–æ–±—â–µ–Ω–∏–π"\
                   + "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: [" + call.from_user.first_name \
                   + "](https://t.me/" + call.from_user.username + ")"
        else:
            text = "*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *\n\n" + text + "\n\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + str(k) + " —Å–æ–æ–±—â–µ–Ω–∏–π"\
                   + "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: " + call.from_user.first_name
        bot.edit_message_text(text, call.message.chat.id,
                              call.message.message_id, parse_mode='MARKDOWN', disable_web_page_preview=True)
        setmessage.remove(call.message.chat.id)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_back')
def less_day(call):
    try:
        bot.answer_callback_query(call.id, text="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        bot.edit_message_text("*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω*", call.message.chat.id,
                          call.message.message_id, parse_mode='MARKDOWN', disable_web_page_preview=True)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_header')
def less_day(call):
    inorderheader.append(call.message.chat.id)
    bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–æ—É –∏–∑ –ø—Ä–∞–π—Å–∞", parse_mode='MARKDOWN',
                         disable_web_page_preview=True)

@bot.callback_query_handler(func=lambda call: call.data == 'order_place')
def less_day(call):
    try:
        inorderplace.append(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —à–æ—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞", parse_mode='MARKDOWN',
                         disable_web_page_preview=True)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_comment')
def less_day(call):
    try:
        inordercomment.append(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", parse_mode='MARKDOWN',
                         disable_web_page_preview=True)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_time')
def less_day(call):
    try:
        inordertime.append(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è\n–í —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú", parse_mode='MARKDOWN',
                         disable_web_page_preview=True)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_date')
def less_day(call):
    try:
        bot.answer_callback_query(call.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É")
        now = datetime.now()  # Current date
        chat_id = call.message.chat.id
        date = (now.year, now.month)
        current_shown_dates[chat_id] = date  # Saving the current date in a dict
        markup = create_calendar(now.year, now.month)
        conn = sqlite3.connect("mydatabase.db")
        cursor = conn.cursor()
        for row in cursor.execute("select header, date, time, place, comment, rowid from orders where chat_id = "
                                  + str(call.message.chat.id) + " and status = 0 order by rowid desc limit 1;"):
            text = order(header=str(row[0]), date=str(row[1]), time=str(row[2]), place=str(row[3]), comment=str(row[4]))
        conn.close()
        bot.edit_message_text(text, call.message.chat.id,
                              call.message.message_id, parse_mode='MARKDOWN', reply_markup=markup)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_refresh')
def less_day(call):
    try:
        conn = sqlite3.connect("mydatabase.db")
        cursor = conn.cursor()
        for row in cursor.execute("select header, date, time, place, comment, rowid from orders where chat_id = "
                                  + str(call.message.chat.id) + " and status = 0 order by rowid desc limit 1;"):
            text = order(header=str(row[0]), date=str(row[1]), time=str(row[2]), place=str(row[3]), comment=str(row[4]))
        if check_order(row[0], row[1], row[2], row[3], row[4]):
            bot.edit_message_text(text, call.from_user.id, call.message.message_id, parse_mode='MARKDOWN',
                                  reply_markup=ordersendmarkup)
        else:
            bot.edit_message_text(text, call.from_user.id, call.message.message_id, parse_mode='MARKDOWN',
                                  reply_markup=ordermarkup)
        conn.close()
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'order_send')
def less_day(call):
        bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        if call.from_user.username:
            customer = "[" + call.from_user.first_name \
                   + "](https://t.me/" + call.from_user.username + ")"
        else:
            customer = call.from_user.first_name
        conn = sqlite3.connect("mydatabase.db")
        cursor = conn.cursor()
        for row in cursor.execute("select header, date, time, place, comment, rowid from orders where chat_id = "
                                  + str(call.message.chat.id) + " and status = 0 order by rowid desc limit 1;"):
            text = order(header=str(row[0]), date=str(row[1]), time=str(row[2]), place=str(row[3]),
                         comment=str(row[4]), customer=customer)
        cursor.execute("update orders set status = 1, customer = '" + customer + "' where chat_id = "
                       + str(call.message.chat.id) + " and status = 0;")
        conn.commit()
        conn.close()
        bot.edit_message_text(text + "\n *–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω*", call.message.chat.id,
                              call.message.message_id, parse_mode='MARKDOWN', disable_web_page_preview=True)
        for admin_chat_id in adminchatid:
            bot.send_message(admin_chat_id, "–ö–ª–∏–µ–Ω—Ç —Å–¥–µ–ª–∞–ª –ø—Ä–µ–¥–∑–∞–∫–∞–∑\n\n" + text)

try:
    for admin_chat_id in adminchatid:
        bot.send_chat_action(admin_chat_id, 'typing')
        bot.send_message(admin_chat_id, "–Ø –∑–∞–ø—É—â–µ–Ω!", reply_markup=adminmarkup)
except:
    pass

while True:
    try:
        bot.polling(none_stop=True)
    except:
        time.sleep(15)
