from tokens \
    import *

import matplotlib
matplotlib.use("Agg")
import psutil
from datetime import datetime
import operator
import time
import telepot
import sqlite3
import logging

logging.basicConfig(filename="logs/tele_bot.log", level=logging.INFO)

setmessage = []
viewstatic = []

userchatid = []
adminchatid = []
graphstart = datetime.now()

stopmarkup = {'keyboard': [['–•–≤–∞—Ç–∏—Ç']]}
helpmarkup = {'keyboard': [['–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']]}
staticmarkup = {'keyboard': [['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'], ['–ü–∞–º—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'], ['–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞'], ['–ù–∞–∑–∞–¥']]}
yn_markup = {'keyboard': [['–î–∞'], ['–ù–µ—Ç'], ['–•–≤–∞—Ç–∏—Ç']]}
yn_only_markup = {'keyboard': [['–î–∞'], ['–ù–µ—Ç']]}
elementmarkup_unreg = {'keyboard': [['–ü—Ä–æ –Ω–∞—Å'], ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏'], ['–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞'], ['Proxy –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞']]}
elementmarkup_reg = {'keyboard': [['–ü—Ä–æ –Ω–∞—Å'], ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏'], ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'], ['Proxy –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞']]}
soc_elementmarkup = {'keyboard': [['Instagram'], ['VK'], ['–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç'], ['–ù–∞–∑–∞–¥']]}
hide_keyboard = {'hide_keyboard': True}

conn = sqlite3.connect("mydatabase.db")
cursor = conn.cursor()
for row in cursor.execute("select chat_id from chats where is_admin = '1';"):
    adminchatid.append((row[0]))
for row in cursor.execute("select chat_id from chats where is_registered_user = '1';"):
    userchatid.append((row[0]))
conn.close()

def clearall(chat_id):
    if chat_id in setmessage:
        setmessage.remove(chat_id)
    if chat_id in viewstatic:
        viewstatic.remove(chat_id)

def RepresentsInt(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

class YourBot(telepot.Bot):
    def __init__(self, *args, **kwargs):
        super(YourBot, self).__init__(*args, **kwargs)
        self._answerer = telepot.helper.Answerer(self)

    def on_chat_message(self, msg):
        content_type, chat_type, chat_id = telepot.glance(msg)
        if str(chat_id) in adminchatid:
            logging.info("Incoming message on admin chat" + str(msg) + " time:" + str(datetime.now()))
        else:
            logging.info("Incoming message on public chat" + str(msg) + " time:" + str(datetime.now()))
        if content_type == 'text':
            if str(chat_id) in adminchatid:
                if chat_id not in setmessage and chat_id not in viewstatic:
                    if msg['text'] == '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
                        bot.sendChatAction(chat_id, 'typing')
                        setmessage.append(chat_id)
                        bot.sendMessage(chat_id, "–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=stopmarkup)
                    elif msg['text'] == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                        bot.sendChatAction(chat_id, 'typing')
                        viewstatic.append(chat_id)
                        bot.sendMessage(chat_id, "–°–º–æ—Ç—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", reply_markup=staticmarkup)
                if chat_id in setmessage:
                    if msg['text'] == '–•–≤–∞—Ç–∏—Ç':
                        bot.sendChatAction(chat_id, 'typing')
                        setmessage.remove(chat_id)
                        bot.sendMessage(chat_id, "–í—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª", reply_markup=helpmarkup)
                    elif msg['text'] != '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
                        bot.sendChatAction(chat_id, 'typing')
                        setmessage.remove(chat_id)
                        conn = sqlite3.connect("mydatabase.db")
                        cursor = conn.cursor()
                        for row in cursor.execute("select chat_id from chats where is_admin = '0'"):
                            bot.sendMessage(row[0], msg['text'], parse_mode='MARKDOWN', disable_web_page_preview=True)
                        conn.close()
                        bot.sendMessage(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª, –ø—Ä–æ–¥–æ–ª–∂–∏–º...", reply_markup=helpmarkup)
                if chat_id in viewstatic:
                    if msg['text'] == '–ù–∞–∑–∞–¥':
                        bot.sendChatAction(chat_id, 'typing')
                        viewstatic.remove(chat_id)
                        bot.sendMessage(chat_id, "–í–µ—Ä–Ω—É–ª–∏—Å—å", reply_markup=helpmarkup)
                    elif msg['text'] == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞':
                        bot.sendChatAction(chat_id, 'typing')
                        memory = psutil.virtual_memory()
                        disk = psutil.disk_usage('/')
                        boottime = datetime.fromtimestamp(psutil.boot_time())
                        now = datetime.now()
                        timedif = "–û–Ω–ª–∞–π–Ω: %.1f —á–∞—Å–æ–≤" % (((now - boottime).total_seconds()) / 3600)
                        memtotal = "–ü–∞–º—è—Ç–∏: %.2f GB " % (memory.total / 1000000000)
                        memavail = "–î–æ—Å—Ç—É–ø–Ω–æ: %.2f GB" % (memory.available / 1000000000)
                        memuseperc = "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: " + str(memory.percent) + " %"
                        diskused = "HDD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: " + str(disk.percent) + " %"
                        pids = psutil.pids()
                        pidsreply = ''
                        procs = {}
                        for pid in pids:
                            p = psutil.Process(pid)
                            try:
                                pmem = p.memory_percent()
                                if pmem > 0.5:
                                    if p.name() in procs:
                                        procs[p.name()] += pmem
                                    else:
                                        procs[p.name()] = pmem
                            except:
                                print("–•–º-–º")
                        sortedprocs = sorted(procs.items(), key=operator.itemgetter(1), reverse=True)
                        for proc in sortedprocs:
                            pidsreply += proc[0] + " " + ("%.2f" % proc[1]) + " %\n"
                        reply = timedif + "\n" + \
                                memtotal + "\n" + \
                                memavail + "\n" + \
                                memuseperc + "\n" + \
                                diskused + "\n\n" + \
                                pidsreply
                        bot.sendMessage(chat_id, reply, disable_web_page_preview=True)
                    elif msg['text'] == '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞':
                        bot.sendChatAction(chat_id, 'typing')
                        message = '*–ù–∞ –º–µ–Ω—è –ø–æ–¥–ø–∏—Å–∞–Ω–æ:*\n'
                        conn = sqlite3.connect("mydatabase.db")
                        cursor = conn.cursor()
                        for row in cursor.execute(
                                "select (case when is_admin = 0 then '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' else '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' end) as label,count(chat_id) from chats group by label;"):
                            message = message + str(row[0]) + ": *" + str(row[1]) + "*\n"
                        conn.close()
                        bot.sendMessage(chat_id, message, parse_mode='MARKDOWN')
            else:
                if chat_id in userchatid:
                    if msg['text'] == '–¢–µ—Å—Ç':
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=elementmarkup_reg)
                else:
                    if msg['text'] == '/start':
                        bot.sendChatAction(chat_id, 'typing')
                        conn = sqlite3.connect("mydatabase.db")
                        cursor = conn.cursor()
                        cursor.execute("INSERT INTO chats(chat_id) VALUES (?);", (str(chat_id),))
                        conn.commit()
                        conn.close()
                        bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç! –°–ø—Ä–∞–≤—à–∏–≤–∞–π, —è —Ä–∞—Å—Å–∫–∞–∂—É", reply_markup=elementmarkup_unreg)
                    elif msg['text'] == '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞':
                        bot.sendChatAction(chat_id, 'typing')
                        userchatid.append(chat_id)
                        conn = sqlite3.connect("mydatabase.db")
                        cursor = conn.cursor()
                        cursor.execute("update chats set is_registered_user = 1 where chat_id = '" + (str(chat_id)) + "';")
                        conn.commit()
                        conn.close()
                        bot.sendMessage(chat_id, "–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞",
                                        reply_markup=elementmarkup_reg)
                    elif msg['text'] == "–ü—Ä–æ –Ω–∞—Å":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id,
                                        "–ê—Ä—Ç-–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ELEMENT\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–æ—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –ª—é–±–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, —è—Ä–∫–∏–µ, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è!\n\nüî•    –û–≥–Ω–µ–Ω–Ω–æ–µ —à–æ—É\nüí°    –°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–µ —à–æ—É\n ‚ö°Ô∏è   –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ —à–æ—É\n üí®   –®–æ—É –í–µ—Ç—Ä–∞\n üî¶   –ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ —à–æ—É\nüö®    –ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —à–æ—É\nüéÄ    –®–æ—É –≥–∏–º–Ω–∞—Å—Ç–æ–∫\nüîÆ    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\nüé™    –•–æ–¥—É–ª–∏—Å—Ç—ã, –º–∏–º—ã, –∂–æ–Ω–≥–ª–µ—Ä—ã, –ª–µ–¥–∏-—Ñ—É—Ä—à–µ—Ç, –∂–∏–≤—ã–µ —Å—Ç–∞—Ç—É–∏",
                                        reply_markup=elementmarkup_unreg)
                    elif msg['text'] == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –ê—Ä—Ç-–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ELEMENT", reply_markup=soc_elementmarkup)
                    elif msg['text'] == "Instagram":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "[Instagram](https://www.instagram.com/element_show/)",
                                        parse_mode='MARKDOWN', disable_web_page_preview=True)
                    elif msg['text'] == "VK":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "[–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/club92907131)", parse_mode='MARKDOWN',
                                        disable_web_page_preview=True)
                    elif msg['text'] == "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç](http://deliriumshow.com/)", parse_mode='MARKDOWN',
                                        disable_web_page_preview=True)
                    elif msg['text'] == "–ù–∞–∑–∞–¥":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "–í–µ—Ä–Ω—É–ª–∏—Å—å", reply_markup=elementmarkup_unreg)
                    elif msg['text'] == "–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å–ª–∏—Å—Ç":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id, "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è", reply_markup=elementmarkup_unreg)
                        for admin_chat_id in adminchatid:
                            try:
                                bot.sendChatAction(admin_chat_id, 'typing')
                                bot.sendMessage(admin_chat_id, "–ù–∞—à –ª—é–±–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –µ–º—É –ø—Ä–∞–π—Å!")
                                bot.forwardMessage(admin_chat_id, chat_id, msg['message_id'])
                            except:
                                print("–•–º-–º")
                    elif msg['text'] == "Proxy –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞":
                        bot.sendChatAction(chat_id, 'typing')
                        bot.sendMessage(chat_id,
                                        "[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Proxy](https://t.me/socks?server=195.201.136.255&port=1080&user=element_89179024466&pass=*****)",
                                        parse_mode='MARKDOWN', reply_markup=elementmarkup_unreg)


TOKEN = telegrambot
bot = YourBot(TOKEN)
bot.message_loop()

for admin_chat_id in adminchatid:
    bot.sendChatAction(admin_chat_id, 'typing')
    bot.sendMessage(admin_chat_id, "–Ø –∑–∞–ø—É—â–µ–Ω!", reply_markup=helpmarkup)


# Keep the program running.
while 1:
    time.sleep(10)
